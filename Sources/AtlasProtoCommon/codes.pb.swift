// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: codes.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Common_ErrorCode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case success // = 0
  case systemInvalidParams // = 10000
  case systemInternalError // = 10001
  case systemNotFound // = 10002
  case systemAlreadyExists // = 10003
  case systemUnauthorized // = 10004
  case systemForbidden // = 10005
  case systemTimeout // = 10006
  case systemTooManyRequests // = 10007
  case userInvalidParams // = 20000
  case userInvalidEmail // = 20001
  case userUsernameTooShort // = 20002
  case userNotFound // = 20003
  case userAlreadyExists // = 20004
  case userUnauthorized // = 20005
  case userForbidden // = 20006
  case userInvalidPassword // = 20007
  case userInvalidUsername // = 20008
  case userInvalidNickname // = 20009
  case userInvalidPhone // = 20010
  case userInvalidCode // = 20011
  case userInvalidToken // = 20012
  case userInvalidRefreshToken // = 20013
  case UNRECOGNIZED(Int)

  public init() {
    self = .success
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .success
    case 10000: self = .systemInvalidParams
    case 10001: self = .systemInternalError
    case 10002: self = .systemNotFound
    case 10003: self = .systemAlreadyExists
    case 10004: self = .systemUnauthorized
    case 10005: self = .systemForbidden
    case 10006: self = .systemTimeout
    case 10007: self = .systemTooManyRequests
    case 20000: self = .userInvalidParams
    case 20001: self = .userInvalidEmail
    case 20002: self = .userUsernameTooShort
    case 20003: self = .userNotFound
    case 20004: self = .userAlreadyExists
    case 20005: self = .userUnauthorized
    case 20006: self = .userForbidden
    case 20007: self = .userInvalidPassword
    case 20008: self = .userInvalidUsername
    case 20009: self = .userInvalidNickname
    case 20010: self = .userInvalidPhone
    case 20011: self = .userInvalidCode
    case 20012: self = .userInvalidToken
    case 20013: self = .userInvalidRefreshToken
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .success: return 0
    case .systemInvalidParams: return 10000
    case .systemInternalError: return 10001
    case .systemNotFound: return 10002
    case .systemAlreadyExists: return 10003
    case .systemUnauthorized: return 10004
    case .systemForbidden: return 10005
    case .systemTimeout: return 10006
    case .systemTooManyRequests: return 10007
    case .userInvalidParams: return 20000
    case .userInvalidEmail: return 20001
    case .userUsernameTooShort: return 20002
    case .userNotFound: return 20003
    case .userAlreadyExists: return 20004
    case .userUnauthorized: return 20005
    case .userForbidden: return 20006
    case .userInvalidPassword: return 20007
    case .userInvalidUsername: return 20008
    case .userInvalidNickname: return 20009
    case .userInvalidPhone: return 20010
    case .userInvalidCode: return 20011
    case .userInvalidToken: return 20012
    case .userInvalidRefreshToken: return 20013
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Common_ErrorCode] = [
    .success,
    .systemInvalidParams,
    .systemInternalError,
    .systemNotFound,
    .systemAlreadyExists,
    .systemUnauthorized,
    .systemForbidden,
    .systemTimeout,
    .systemTooManyRequests,
    .userInvalidParams,
    .userInvalidEmail,
    .userUsernameTooShort,
    .userNotFound,
    .userAlreadyExists,
    .userUnauthorized,
    .userForbidden,
    .userInvalidPassword,
    .userInvalidUsername,
    .userInvalidNickname,
    .userInvalidPhone,
    .userInvalidCode,
    .userInvalidToken,
    .userInvalidRefreshToken,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Common_ErrorCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUCCESS"),
    10000: .same(proto: "SYSTEM_INVALID_PARAMS"),
    10001: .same(proto: "SYSTEM_INTERNAL_ERROR"),
    10002: .same(proto: "SYSTEM_NOT_FOUND"),
    10003: .same(proto: "SYSTEM_ALREADY_EXISTS"),
    10004: .same(proto: "SYSTEM_UNAUTHORIZED"),
    10005: .same(proto: "SYSTEM_FORBIDDEN"),
    10006: .same(proto: "SYSTEM_TIMEOUT"),
    10007: .same(proto: "SYSTEM_TOO_MANY_REQUESTS"),
    20000: .same(proto: "USER_INVALID_PARAMS"),
    20001: .same(proto: "USER_INVALID_EMAIL"),
    20002: .same(proto: "USER_USERNAME_TOO_SHORT"),
    20003: .same(proto: "USER_NOT_FOUND"),
    20004: .same(proto: "USER_ALREADY_EXISTS"),
    20005: .same(proto: "USER_UNAUTHORIZED"),
    20006: .same(proto: "USER_FORBIDDEN"),
    20007: .same(proto: "USER_INVALID_PASSWORD"),
    20008: .same(proto: "USER_INVALID_USERNAME"),
    20009: .same(proto: "USER_INVALID_NICKNAME"),
    20010: .same(proto: "USER_INVALID_PHONE"),
    20011: .same(proto: "USER_INVALID_CODE"),
    20012: .same(proto: "USER_INVALID_TOKEN"),
    20013: .same(proto: "USER_INVALID_REFRESH_TOKEN"),
  ]
}
